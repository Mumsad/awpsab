P 1A:
Aim: Create and application that obtains for int values from the user and displays the product.

P 1B:
Aim:  Create an application to demonstrate string operations.

P 1D_1:
i.	Generate Fibonacci series. 
ii.	Test for prime numbers. 
iii.	Test for vowels.
iv.	Use of foreach loop with arrays 
v.	Reverse a number and find sum of digits of a number. 

P 1-D_2:
Aim: Test For Prime Numbers

P 1-D_3:
Aim: Test for vowels. 

P 1-D_4:
Aim: Use of foreach loop with arrays

P 1-D_5:

 
P 2-A_1
2. Working with Object Oriented C# and ASP .NET 
a. Create simple application to perform following operations 
i. Finding factorial Value ii. Money Conversion iii. Quadratic Equation iv. Temperature Conversion
Aim: Create a simple application for finding factorial value.



P 2-A_2
Aim: Create a simple application to perform money conversion

P 2-A-C
Aim: QUADRATIC EQUATION SOLVE 

P 2-A-D
Aim: Create a simple application to perform Temperature Conversion

P 2B-A
Aim: Function Overloading 

P 2B-B
b. Create simple application to demonstrate use of following concepts 
i. Function Overloading		ii. Inheritance (all types) 	iii. Constructor overloading	 iv. Interfaces


P 2B-B
Aim: Hierarchical Inheritance
P 2B-B
Aim: Interfaces and multiple inheritance.

P 2B-C
Aim: Constructor overloading

P 2B-D
Aim: Interfaces

P:3
Demonstrate the use of Calendar control to perform following operations
a) Display messages in a calendar control.
b) Display vacation in a calendar control.
c) Selected day in a calendar control using style.
d) Difference between two calendar dates.

P:4
Demonstrate the use of TreeView control perform following operations.
TreeView control and datalist.
TreeView operations.

P:5
Create a Registration form to demonstrate use of various validation controls.

P:6
Create a WebForm to demonstrate use of Adrotator Control.

P:7
Create a WebForm to demonstrate use of User Control.

P:8
Aim: Create a simple web page with various sever controls to demonstrate setting and use of their properties. (Example : AutoPostBack)

P:9
Aim: Create a simple web page with various sever controls to demonstrate setting and use of their properties. (Example : AutoPostBack)

P:10
AIM: Create a web application to demonstrate use of Grid view control and for inserting a record from a database.
 
P:11
AIM: Create a web application to demonstrate use of Gridview control and for inserting a record from a database
------------------------------------------------------------------------------------------------
P 1A:
Aim: Create and application that obtains for int values from the user and displays the product.
Code:  int a, b, c, d, e;
  Console.Write("Enter the number ");
  a = Convert.ToInt32(Console.ReadLine());  
  Console.Write("Enter the number ");
  b = Convert.ToInt32(Console.ReadLine());
  Console.Write("Enter the number ");
  c = Convert.ToInt32(Console.ReadLine());
  Console.Write("Enter the number ");
  d = Convert.ToInt32(Console.ReadLine());
  e= a * b * c * d;
  Console.WriteLine("Multiplication of " +a + "x" +b+ "x" +c+"x"+d+ " =" +e);


Output:



	




P 1B:
Aim:  Create an application to demonstrate string operations.
Code:
using System;
public class Program
{
    public static void Main(string[] args)
    {
        String String1 = "     string method        ";
        Console.WriteLine(String1);
        //ToUpper()
        Console.WriteLine(String1.ToUpper());
        //ToLower()
        Console.WriteLine(String1.ToLower());
        //Replace Method to Function
        Console.WriteLine(String1.Replace("method", "function"));
        Console.WriteLine(String1.Trim());
        //length of the string
        Console.WriteLine(String1.Length);
        Console.WriteLine(String1.Substring(14));
    }
}
Output:
 
P 1D_1:
Aim: Create an application to demonstrate following operations 
i.	Generate Fibonacci series. 
ii.	Test for prime numbers. 
iii.	Test for vowels.
iv.	Use of foreach loop with arrays 
v.	Reverse a number and find sum of digits of a number. 
CODE:
Console.WriteLine("Fibonacci series");
int a=0, b=1, c=0;
for (int i=1; i<200; i++){
    Console.WriteLine(a+” “);

    a = a+b;
    b = c;
    c = a;
}
OUTPUT:
 
  




P 1-D_2:
Aim: Test For Prime Numbers
CODE:
Console.WriteLine(" Test for prime numbers.");
 int count = 0; //count of 0 after modul
    Console.WriteLine("Enter the Number--------");
    input =Convert.ToInt16(Console.ReadLine());
for(int i = 1; i<=input; i++){
    if (input%i==0){
       count++;
       break;
    }
}
    if(count==2 ){
    Console.WriteLine("{0} is a prime Number", input);    
    }
    if(input==1 || input ==0){
        Console.WriteLine("is not a prime or composite"); 
      }
    else {
    Console.WriteLine("{0} is not a prime Number", input);
    }
OUTPUT:


P 1-D_3:
Aim: Test for vowels. 
CODE: 
Console.WriteLine("iii. Test for vowels. ");
string str1 , strtolower;
Console.WriteLine("Enter the String ");
str1 = Console.ReadLine();
Console.WriteLine("Your Given String-- "+str1);
strtolower = str1.ToLower();
Console.WriteLine("Now Converted to Lower-- "+ strtolower);
Char[] strarray = strtolower.ToCharArray();
foreach (char r in strarray){
    if (r=='a'|| r == 'e' || r == 'i' || r == 'o' || r == 'o')
    {
        Console.WriteLine(r+ " is the vowel");
    } }
OUTPUT:


P 1-D_4:
Aim: Use of foreach loop with arrays
CODE:
Console.WriteLine("iii. Test for vowels. ");
string str1 , strtolower;
Console.WriteLine("Enter the String ");
str1 = Console.ReadLine();
Console.WriteLine("Your Given String-- "+str1);
strtolower = str1.ToLower();
Console.WriteLine("Now Converted to Lower-- "+ strtolower);
Char[] strarray = strtolower.ToCharArray();
foreach (char r in strarray)
{
    if (r=='a'|| r == 'e' || r == 'i' || r == 'o' || r == 'o')
    {
   Console.WriteLine(r+ " is the vowel");
    }  }  
OUTPUT: 
P 1-D_5:
Aim: Reverse a number and find sum of digits of a number
CODE: 
using System;
public class Program
{
    public static void Main(string[] args)
    {
        Console.Write("Enter a number to reverse: ");
        int numberToReverse = Convert.ToInt32(Console.ReadLine());
        int reversedNumber = 0;
        while (numberToReverse != 0)
        {            int digit = numberToReverse % 10;
            reversedNumber = reversedNumber * 10 + digit;
            numberToReverse /= 10;
        }
        Console.WriteLine("Reversed number: " + reversedNumber);
    }}




OUTPUT: 

 
P 2-A_1
2. Working with Object Oriented C# and ASP .NET 
a. Create simple application to perform following operations 
i. Finding factorial Value ii. Money Conversion iii. Quadratic Equation iv. Temperature Conversion
Aim: Create a simple application for finding factorial value.
CODE:
Console.Write("Enter a number to calculate its factorial: ");
        int number = Convert.ToInt32(Console.ReadLine());
        if (number < 0)
        {
            Console.WriteLine("Factorial is not defined for negative numbers.");
        }
        else
        {   long factorial = 1;
            for (int i = 1; i <= number; i++)
            {
                factorial *= i;
            }
            Console.WriteLine($"Factorial of {number} is: {factorial}");
        }  
)
OUTPUT: 


P 2-A_2
Aim: Create a simple application to perform money conversion
CODE: 
Console.WriteLine("Choose currency conversion:");
Console.WriteLine("1. USD to INR\n 2. KWD to INR \n 3. EUR to INR");
Console.Write("Enter your choice (1/2/3): ");
int choice = Convert.ToInt32(Console.ReadLine());
double amount, result;
switch (choice)
{
    case 1:

        Console.Write("Enter the amount in USD: ");
        amount = Convert.ToDouble(Console.ReadLine());
        result = amount * 81.07; // Conversion rate as of the knowledge cutoff date.
        Console.WriteLine($"Converted amount: {result} INR");
        break;
    case 2:

        Console.Write("Enter the amount in KWD: ");
        amount = Convert.ToDouble(Console.ReadLine());
        result = amount * 267.104; // Conversion rate as of the knowledge cutoff date.
        Console.WriteLine($"Converted amount: {result} INR");
        break;
    case 3:

        Console.Write("Enter the amount in EUR: ");
        amount = Convert.ToDouble(Console.ReadLine());
        result = amount * 91.2389; // Conversion rate as of the knowledge cutoff date.
        Console.WriteLine($"Converted amount: {result} INR");
        break;
    


        default:

        Console.WriteLine("Invalid choice. Please select a valid option (1/2/3).");
        break;

OUTPUT:

 


P 2-A-C
Aim: QUADRATIC EQUATION SOLVE
CODE:
Console.WriteLine("Hello, World!");
double a, b, c, dno, dis, x1, x2;
Console.WriteLine("Enter the three values");
a = Convert.ToDouble(Console.ReadLine());
c = Convert.ToDouble(Console.ReadLine());
b = Convert.ToDouble(Console.ReadLine());

if(a==0){
    x1 = -c/b;
    Console.WriteLine("Roots are Linear" + x1);
}

else
{
    dis = (b*b) / (4*a*c);
    dno = 2*a;

    if(dis>0)
{
        Console.WriteLine("the root are real and distinct");
        x1 = ((-b)/(dno)) - ((Math.Sqrt(dis))/dno);
        x2 = ((-b)/(dno)) - ((Math.Sqrt(dis))/dno);
        Console.WriteLine("the roots are " +x1+" " +  x2);
    }


    else if(dis==0)
{
        Console.WriteLine("Roots are repeated");
        x1 = (-b)/dno;
        Console.WriteLine("The roots are imaginary Roots");
        x1 = (-b)/dno;
        x2 = (Math.Sqrt((4*a*c)-(b*b)))/dno;
        Console.WriteLine("The Root one "+x1+ "-i " +x2);
        Console.WriteLine("The Root one "+x1+ "-i " +x2);
    }
}
OUTPUT:

 
P 2-A-D
Aim: Create a simple application to perform Temperature Conversion
CODE:
using System;
public class Program
{
    public static void Main(string[] args)
    {
        Console.WriteLine("Temperature Conversion:");
        Console.WriteLine("1. Celsius to Fahrenheit");
        Console.WriteLine("2. Fahrenheit to Celsius");
        Console.Write("Enter your choice (1/2): ");
        int choice = Convert.ToInt32(Console.ReadLine());
        double temp, far, convertedTemp;
        switch (choice)
        {
            case 1:
                Console.Write("Enter the temperature in Celsius: ");
                temp = Convert.ToDouble(Console.ReadLine());
                convertedTemp = CelsiusToFahrenheit(temp);
                Console.WriteLine($"Converted temperature: {convertedTemp} Fahrenheit");
                break;
            case 2:
                Console.Write("Enter the temperature in Fahrenheit: ");
                far = Convert.ToDouble(Console.ReadLine());
                convertedTemp = FahrenheitToCelsius(far);
                Console.WriteLine($"Converted temperature: {convertedTemp} Celsius");
                break;
            

default:
                Console.WriteLine("Invalid choice. Please select a valid option (1/2).");
                break;
        }
    }

    public static double CelsiusToFahrenheit(double celsius)
    {
        return (celsius * 9 / 5) + 32;
    }

    public static double FahrenheitToCelsius(double fahrenheit)
    {
        return (fahrenheit - 32) * 5 / 9;}
OUTPUT:
 
P 2B-A
b. Create simple application to demonstrate use of following concepts 
i. Function Overloading		ii. Inheritance (all types) 	iii. Constructor overloading	 iv. Interfaces
Aim: Function Overloading 
CODE:
//fUNCTION OVERLOADING
public class Calculator{
public int Add(int a, int b){
    return a + b;
}
public int Add(int a, int b, int c){
    return a + b + c;
}
Public double Add(double a, double b){
Return a + b + c;
}}
class Program{
    static void Main(){
        Calculator c = new Calculator();
        int sum = c.Add(11,13);
        int sum2 = c.Add(11,12,13); double sum3 = c.Add(1.2,1.3);
        Console.WriteLine(sum);
        Console.WriteLine(sum2);Console.WriteLine(sum3);}}
OUTPUT:  

P 2B-B
Aim:  INHERITANCE
CODE:
//##simple Inheritance
using System;

// Base class (Superclass)
public class Animal
{
    public string Name { get; set; }
    public int Age { get; set; }

    public void MakeSound()
    {
        Console.WriteLine("Animal makes a sound.");
    }
}

// Derived class (Subclass)
public class Dog : Animal
{
    public void Bark()
    {
        Console.WriteLine("Dog barks!");
    }
}






class Program
{
    static void Main()
    {
        Dog myDog = new Dog();
        myDog.Name = "Buddy";
        myDog.Age = 3;

        Console.WriteLine("Dog's Name: " + myDog.Name);
        Console.WriteLine("Dog's Age: " + myDog.Age);

        myDog.MakeSound(); // Inherited method from the Animal class
        myDog.Bark();      // Method specific to the Dog class
    }
}
OUTPUT:

 
P 2B-B
Aim: Hierarchical Inheritance
CODE:
using System;

// Base class (Superclass)
public class Animal
{
    public void MakeSound()
    {
        Console.WriteLine("Animal makes a sound.");
    }
}
// First derived class (Subclass)
public class Dog : Animal
{
    public void Bark()
    {
        Console.WriteLine("Dog barks!");
    }
}
// Second derived class (Subclass)
public class Cat : Animal
{
    public void Meow()
    {
        Console.WriteLine("Cat meows!");
    }
}



class Program
{
    static void Main()
    {
        Dog myDog = new Dog();
        myDog.MakeSound(); // Inherited method from the Animal class
        myDog.Bark();      // Method specific to the Dog class

        Cat myCat = new Cat();
        myCat.MakeSound(); // Inherited method from the Animal class
        myCat.Meow();      // Method specific to the Cat class
    }
}



OUTPUT:

 
P 2B-B
Aim: Interfaces and multiple inheritance.
CODE:
using System;
// First interface
public interface IFlyable
{
    void Fly();
}

// Second interface
public interface ISwimmable
{
    void Swim();
}

// Class implementing multiple interfaces
public class Bird : IFlyable, ISwimmable
{
    public void Fly()
    {
        Console.WriteLine("Bird is flying.");
    }

    public void Swim()
    {
        Console.WriteLine("Bird is swimming.");
    }
}



class Program
{
    static void Main()
    {
        Bird myBird = new Bird();
        myBird.Fly(); // Method from the IFlyable interface
        myBird.Swim(); // Method from the ISwimmable interface
    }
}

OUTPUT:





















	
P 2B-C
Aim: Constructor overloading
CODE:
    public class Person
{
    public string Name;
    public int Age;
    //constructor with name parameter
    public Person(string name){
        Name = name;
        Age = 0;
    }
    public Person(string name , int age){
        Name = name;
        Age = age;
    }
    //Default constructor
    public Person()
    {
        Name = "UNKNOWN";
        Age = 33;
    }
        
}








class Program{
    public static void Main(){
    Person P1 = new Person("Alice");
    Console.WriteLine("First Constructor\nName: " +P1.Name +" Age: "+P1.Age);
    Person P3 = new Person("Bill",44);
    Console.WriteLine("Second Constructor \nName: "+P3.Name+ " Age: "+P3.Age);
    Person P2 = new Person();
    Console.WriteLine("Default Constructor\nName: "+P2.Name+" Age: " +P2.Age);
}
}

OUTPUT:

 
P 2B-D
Aim: Interfaces
CODE:
using System;
// First interface
public interface IFlyable
{
    void Fly();
}
 
// Second interface
public interface ISwimmable
{
    void Swim();
}
 
// Class implementing multiple interfaces
public class Bird : IFlyable, ISwimmable
{
    public void Fly()
    {
        Console.WriteLine("Bird is flying.");
    }
 
    public void Swim()
    {
        Console.WriteLine("Bird is swimming.");
    }
}
 
 
 
 
class Program
{
    static void Main()
    {
        Bird myBird = new Bird();
        myBird.Fly(); // Method from the IFlyable interface
        myBird.Swim(); // Method from the ISwimmable interface
    }
}
 
OUTPUT:
 
 
P:3
Demonstrate the use of Calendar control to perform following operations
a) Display messages in a calendar control.
b) Display vacation in a calendar control.
c) Selected day in a calendar control using style.
d) Difference between two calendar dates.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE NEW PROJECT
 AFTER GIVING PROJECT NAME: IN MY CASE IN AM GIVEN ‘CALENDER’
right click in "CALENDER - Microsoft Visual Studio"
left click on "Add (menu item)"
left click on "New Item... (menu item)"
left click on "Web Form (text)" in "Add New Item - CALENDER"
left click on "Add (button)" in "Add New Item - CALENDER"

AFTER THIS YOU GET THIS 

Calendar Control 
design code :- 

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs" Inherits="calcontrol.WebForm1" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title></title>
</head> <center>
<body >
   
    <form id="form1" runat="server">
        <h1> Calander Prctical</h1>
        <div>
            <h3>Select Start Date </h3>
            <asp:Calendar ID="Calendar1" runat="server" OnSelectionChanged="Calendar1_SelectionChanged" OnDayRender="Calendar1_DayRender" Height="200px" Width="220px" BackColor="#FFFFCC" BorderColor="#FFCC66" BorderWidth="1px" DayNameFormat="Shortest" Font-Names="Verdana" Font-Size="8pt" ForeColor="#663399" ShowGridLines="True">
                <DayHeaderStyle BackColor="#FFCC66" Font-Bold="True" Height="1px" />
                <NextPrevStyle Font-Size="9pt" ForeColor="#FFFFCC" />
                <OtherMonthDayStyle ForeColor="#CC9966" />
                <SelectedDayStyle BackColor="#CCCCFF" Font-Bold="True" />
                <SelectorStyle BackColor="#FFCC66" />
                <TitleStyle BackColor="#990000" Font-Bold="True" Font-Size="9pt" ForeColor="#FFFFCC" />
                <TodayDayStyle BackColor="#FFCC66" ForeColor="White" />
            </asp:Calendar>

            <h3>Select End Date </h3>
            <asp:Calendar ID="Calendar2" runat="server" OnDayRender="Calendar2_DayRender" BackColor="White" BorderColor="#3366CC" BorderWidth="1px" CellPadding="1" DayNameFormat="Shortest"  Font-Names="Verdana" Font-Size="8pt" ForeColor="#003399" Height="200px" Width="220px">
                <DayHeaderStyle BackColor="#99CCCC" ForeColor="#336666" Height="1px" />
                <NextPrevStyle Font-Size="8pt" ForeColor="#CCCCFF" />
                <OtherMonthDayStyle ForeColor="#999999" />
                <SelectedDayStyle BackColor="#009999" Font-Bold="True" ForeColor="#CCFF99" />
                <SelectorStyle BackColor="#99CCCC" ForeColor="#336666" />
                <TitleStyle BackColor="#003399" BorderColor="#3366CC" BorderWidth="1px" Font-Bold="True" Font-Size="10pt" ForeColor="#CCCCFF" Height="25px" />
                <TodayDayStyle BackColor="#99CCCC" ForeColor="White" />
                <WeekendDayStyle BackColor="#CCCCFF" />
            </asp:Calendar>
            <br />
           <b> <asp:Label ID="Label1" runat="server"  Text="No of days Left is :-    " BorderWidth="3px" Width="190px"></asp:Label> &nbsp &nbsp</b>
&nbsp;<asp:Button ID="Button1" runat="server" OnClick="Button1_Click" Text="Result"  Font-Bold="True" />
        </div>
    </form>


</body>

        </center>

</html>

Cs Code:-

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace calcontrol
{
    public partial class WebForm1 : System.Web.UI.Page
    {

        protected void Calendar1_SelectionChanged(object sender, EventArgs e)
        {

        }

        protected void Calendar2_DayRender(object sender, DayRenderEventArgs e)
        {
            if (e.Day.Date.Day == 25)
                e.Cell.Controls.Add(new LiteralControl("</br>Christmas"));


        }

        protected void Calendar1_DayRender(object sender, DayRenderEventArgs e)
        {
            if (e.Day.Date.Day == 27)
                e.Cell.Controls.Add(new LiteralControl("</br>Christmas"));


        }

        protected void Button1_Click(object sender, EventArgs e)
        {
            TimeSpan t = Calendar2.SelectedDate - Calendar1.SelectedDate;
            Label1.Text += t.Days.ToString();
        }
    }
}



AFTER SELECTING DATE 

P:4

Demonstrate the use of TreeView control perform following operations.
TreeView control and datalist.
TreeView operations.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ASPX CODE : WebForm1.aspx

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs" Inherits="TreeView.WebForm1" %>
<html xmlns="http://www.w3.org/1999/xhtml">
<!DOCTYPE html>
<head runat="server">
    <title></title>
</head>
<body>
    <form id="form1" runat="server">
        <div>
        </div>
        <asp:TreeView ID="TreeView1" runat="server" >
            <Nodes>
                <asp:TreeNode Text="Department" Value="Department">
                    <asp:TreeNode Text="BSC Science" Value="BSC Science">
                        <asp:TreeNode Text="Maths" Value="Maths" ShowCheckBox="True"></asp:TreeNode>
                        <asp:TreeNode Text="Physic" Value="Physic" ShowCheckBox="True"></asp:TreeNode>
                    </asp:TreeNode>
                    <asp:TreeNode Text="BSC Computer Science" Value="BSC Computer Science">
                        <asp:TreeNode Text="Basics of Computer Science" Value="Basics of Computer Science" ShowCheckBox="True"></asp:TreeNode>
                        <asp:TreeNode Text="Environmental Science" Value="Environmental Science" ShowCheckBox="True"></asp:TreeNode>
                    </asp:TreeNode>
                    <asp:TreeNode Text="BSC I.T" Value="BSC I.T">
                        <asp:TreeNode Text="Networking" Value="Networking" ShowCheckBox="True"></asp:TreeNode>
                        <asp:TreeNode Text="Microprocessor" Value="Microprocessor" ShowCheckBox="True"></asp:TreeNode>
                    </asp:TreeNode>
                </asp:TreeNode>
            </Nodes>
        </asp:TreeView>
        <asp:DataList ID="DataList1" runat="server">
        <ItemTemplate>
            <%#Eval("value") %> 
        </ItemTemplate>
            </asp:DataList>
        <asp:Button ID="Button1" runat="server" Text="Button" Onclick="Button1_Click"/>
        
    </form>
</body>
</html>
ASPX.CS CODE: WebForm1.aspx.cs

using System;
using System.Web.UI.WebControls;

namespace TreeView
{
    public partial class WebForm1 : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }
        protected void Button1_Click(object sender, EventArgs e)
        {
            TreeNodeCollection T;
            T = TreeView1.CheckedNodes;
            DataList1.DataSource = T;
            DataList1.DataBind();
            DataList1.Visible = true;
        }

        protected void TreeView1_SelectedNodeChanged(object sender, EventArgs e)
        {
            Response.Write("You have selected the option:" + TreeView1.SelectedValue);
        }

        protected void TreeView1_TreeNodeCollapsed(object sender, TreeNodeEventArgs e)
        {
            Response.Write("The value Collapsed was: " + e.Node.Value);
        }
    }
}

OUTPUT:
 
P:5

Create a Registration form to demonstrate use of various validation controls.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ASPX CODE : WebForm1.aspx
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs" Inherits="Register.WebForm1" %>

<!DOCTYPE html>
<html>
<head>
    <title>Registration Page</title>
</head>
<body>
    <form runat="server">
        <fieldset>
            <legend>STUDENT REGISTRATION FORM</legend>
            <label>Firstname</label>
            <input type="text" name="firstname" id="fname" runat="server" size="15" /><br><br>
            <label>Middlename:</label>
            <input type="text" name="middlename" id="mname" runat="server" size="15" /><br><br>
            <label>Lastname:</label>
            <input type="text" name="lastname" id="lname" runat="server" size="15" /><br><br>
            <label>Course:</label>
            <asp:DropDownList ID="ddlCourse" runat="server">
                <asp:ListItem Text="Course" Value=""></asp:ListItem>
                <asp:ListItem Text="CS" Value="FYIT"></asp:ListItem>
                <asp:ListItem Text="IT" Value="IT"></asp:ListItem>
                <asp:ListItem Text="BSC" Value="TYIT"></asp:ListItem>
            </asp:DropDownList>
            <br><br>
            <label>Gender:</label><br>
            <asp:RadioButton ID="rbMale" runat="server" Text="Male" GroupName="gender" /><br>
            <asp:RadioButton ID="rbFemale" runat="server" Text="Female" GroupName="gender" /><br>
            <asp:RadioButton ID="rbOther" runat="server" Text="Other" GroupName="gender" /><br><br> 
            <asp:Button ID="btnSubmit" runat="server" Text="Submit" OnClick="btnSubmit_Click" />
        </fieldset>
        
        <!-- Display the details -->
        <asp:Label ID="lblDetails" runat="server" Text="" EnableViewState="false"></asp:Label>
    </form>
</body>
</html>
ASPX.CS CODE: WebForm1.aspx.cs

using System;

namespace Register
{
    public partial class WebForm1 : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {            }
            protected void btnSubmit_Click(object sender, EventArgs e)
            {
                string firstname = fname.Value;
                string middlename = mname.Value;
                string lastname = lname.Value;
                string course = ddlCourse.SelectedValue;
                string gender = rbMale.Checked ? "Male" : (rbFemale.Checked ? "Female" : "Other");
                // Display the student details
                string details = $"Name: {firstname} {middlename} {lastname}<br>"
                                 + $"Course: {course}<br>"
                                 + $"Gender: {gender}<br>"
                                 ;
                lblDetails.Text = details;
            }
        }
    }
OUTPUT:

P:6

Create a WebForm to demonstrate use of Adrotator Control.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ASPX CODE : WebForm1.aspx

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs" Inherits="ADrotator.WebForm1" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title></title>
</head>
<body>
    
            <asp:AdRotator runat="server" Height="450px" DataSourceID="XmlDataSource1"></asp:AdRotator>
            <asp:XmlDataSource ID="XmlDataSource1" runat="server" DataFile="~/XMLFile1.xml"></asp:XmlDataSource>
    
</body>
</html>
To create xml file press clt+shift+a
Search xml and ADD. 
XML FILE CODE: XMLFile.xml
<?xml version="1.0" encoding="utf-8" ?>

<Advertisements>

	<Ad>
		<ImageUrl>isro.png</ImageUrl>
		<NavigateUrl>https://www.isro.gov.in</NavigateUrl>
		<AlternateText>isro official</AlternateText>
	
	</Ad>

	<Ad>
		<ImageUrl>microsoft-logo.png</ImageUrl>
		<NavigateUrl>http://www.microsoft.com</NavigateUrl>
		<AlternateText>Microsoft Windows</AlternateText>
	
	</Ad>

	<Ad>
		<ImageUrl>GitHub-logo.jpeg</ImageUrl>
		<NavigateUrl>http://www.github.com</NavigateUrl>
		<AlternateText>Github</AlternateText>
	
	</Ad>
</Advertisements>
 
OUTPUT:

OUTPUT: When image not load . not given correct name of image.
 
P:7

Create a WebForm to demonstrate use of User Control.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ASPX CODE : WebForm1.aspx
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title></title>
</head>
<body>
    <form id="form1" runat="server">
       <asp:Label ID="Label1" runat="server" Text="Name"></asp:Label><br />
 <asp:TextBox ID="TextBox1" runat="server"></asp:TextBox><br />
 <asp:Label ID="Label2" runat="server" Text="Selected Course"></asp:Label><br />
 <asp:TextBox ID="TextBox2" runat="server"></asp:TextBox><br />
 <asp:Label ID="Label3" runat="server" Text=""></asp:Label><br />
 <asp:Button ID="Button1" runat="server" Text="Button" OnClick="Button_Clicked" />
    
    </form>
</body>
</html>
ASPX.CS CODE : WebForm1.aspx.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace UserControl
{
    public partial class WebForm1 : System.Web.UI.Page
    {
        protected void Button_Clicked(object sender, EventArgs e)
        {
            Label3.Text = "Your Name is " + TextBox1.Text + " You Selected this " + TextBox2.Text;
        }
    }
}
 
OUTPUT:
P:8

Aim: Create a simple web page with various sever controls to demonstrate setting and use of their properties. (Example : AutoPostBack)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ASPX CODE : WebForm1.aspx
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title></title>
</head>
<body>
    <form id="form1" runat="server">
       <asp:Label ID="Label1" runat="server" Text="Enter your Name"></asp:Label><br />
 <asp:TextBox ID="TextBox1" runat="server"></asp:TextBox><br />
        <asp:ListBox ID="ListBox1" runat="server" OnSelectedIndexChanged="ListBox1_Selected" AutoPostBack="True" Height="44px" Width="50px" >
            <asp:ListItem>Female</asp:ListItem>
            <asp:ListItem>Male</asp:ListItem>
        </asp:ListBox><br />
 <asp:Button ID="Button1" runat="server" Text="Button" OnClick="Button_Clicked" />
 <asp:Label ID="Label3" runat="server" Text=""></asp:Label><br />
 <asp:Label ID="Label2" runat="server" Text=""></asp:Label><br />
 <asp:Label ID="Label4" runat="server" Text=""></asp:Label><br />



   
    
    </form>
</body>
</html>
ASPX.CS CODE : WebForm1.aspx.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace UserControl
{
    public partial class WebForm1 : System.Web.UI.Page
    {
   
        protected void ListBox1_Selected(object sender, EventArgs e)
        {
            if (ListBox1.SelectedItem != null)
            {
              Label2.Text= "You selected " + ListBox1.SelectedItem.ToString();
              
            }
            else
            {
                Label3.Text = "Select Any one option";
            }

        }
        public void Button_Clicked(object sender, EventArgs e)
        {
            Label3.Text = "Your Name is " + TextBox1.Text ;

        }
    }}
OUTPUT:



 
P:9

Aim: Create a simple web page with various sever controls to demonstrate setting and use of their properties. (Example : AutoPostBack)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ASPX CODE : WebForm1.aspx
<%@ Page Language = "C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs"
Inherits="sitemap2.WebForm1" %> 
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
 <title></title>
</head>
<body>
 <form id="form1" runat="server">
 <div>
 <asp:SiteMapPath ID = "SiteMapPath1" runat="server">
 </asp:SiteMapPath >
 < asp:Menu ID = "Menu1" runat="server" DataSourceID="SiteMapDataSource1">
 </asp:Menu >
 < asp:SiteMapDataSource ID = "SiteMapDataSource1" runat="server" />
 </div>
 </form>
</body>
</html> 
WebForm2.aspx: 
<%@ Page Language = "C#" AutoEventWireup="true" CodeBehind="WebForm2.aspx.cs"
Inherits="sitemap2.WebForm2" %> 
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
 <title></title>
</head>
<body>
 <form id="form1" runat="server">
 <div>
 <asp:SiteMapPath ID = "SiteMapPath1" runat="server">
 </asp:SiteMapPath >
 < br /> Welcome to a RD National College 
 </div>
 </form>
</body>
</html>
----------------------------------------------------------------------------------------¬-----
 
ASPX CODE : WebForm2.aspx

<%@ Page Language = "C#" AutoEventWireup="true" CodeBehind="WebForm2.aspx.cs"
Inherits="sitemap2.WebForm2" %> 
<!DOCTYPE html>
<html xmlns = "http://www.w3.org/1999/xhtml" >
< head runat="server">
 <title></title>
</head>
<body>
 <form id = "form1" runat="server">
 <div>
 <asp:SiteMapPath ID = "SiteMapPath1" runat="server">
 </asp:SiteMapPath>
 <br /> Welcome to a RD National College
 </div>
 </form>
</body>
</html>
--------------------------------------------------------------------------------------------
ASPX CODE : WebForm3.aspx

<html xmlns = "http://www.w3.org/1999/xhtml" >
< head runat="server">
 <title></title>
</head>
<body>
 <form id = "form1" runat="server">
 <div>
 <asp:SiteMapPath ID = "SiteMapPath1" runat="server">
 </asp:SiteMapPath>
 <br /> Welcome to IT Department
 </div>
 </form>
</body>
</html>
---------------------------------------------------------------------------------------------

<? xml version="1.0" encoding="utf-8" ?>
<siteMap xmlns = "http://schemas.microsoft.com/AspNet/SiteMap-File-1.0" >
 < siteMapNode url="WebForm1.aspx" title="Home Page" description="Home">
 <siteMapNode url = "WebForm2.aspx" title="First Page" description="First Page" />
 <siteMapNode url = "WebForm3.aspx" title="Second Page" description="Second Page" />
 </siteMapNode>
</siteMap>

 







	
 
P:10
AIM: Create a web application to demonstrate use of Grid view control and for inserting a record from a database.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------








ASPX CODE:WebFom1.aspx
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs" 
Inherits="gridviewwww.WebForm1" %> 
<!DOCTYPE html> 
<html xmlns="http://www.w3.org/1999/xhtml"> 
<head runat="server"> 
 <title></title> 
</head> 
<body> 
 <form id="form1" runat="server"> 
 <div> 
 <asp:GridView ID="GridView1" runat="server" AutoGenerateColumns="False" DataKeyNames="SrNo" 
DataSourceID="SqlDataSource1" OnSelectedIndexChanged="GridView1_SelectedIndexChanged"> 
 <Columns> 
 <asp:BoundField DataField="SrNo" HeaderText="SrNo" ReadOnly="True" SortExpression="SrNo" 
/> 
 <asp:BoundField DataField="S_Name" HeaderText="S_Name" SortExpression="S_Name" /> 
 </Columns> 
 </asp:GridView> 
 <asp:SqlDataSource ID="SqlDataSource1" runat="server" ConnectionString="<%$ 
ConnectionStrings:db1ConnectionString %>" SelectCommand="SELECT * FROM 
[pr10]"></asp:SqlDataSource> 
 <br /> 
 </div> 
 </form> 
</body> 
</html>










 
P:11
AIM: Create a web application to demonstrate use of Gridview control and for inserting a record from a database
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ASPX CODE : WebForm1.aspx
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs" 
Inherits="WebApplication11.WebForm1" %> 
<!DOCTYPE html> 
<html xmlns="http://www.w3.org/1999/xhtml"> 
<head runat="server"> 
<title></title> 
</head> 
<body> 
<form id="form1" runat="server"> 
<p> 
<asp:GridView ID="GridView1" runat="server" AutoGenerateColumns="False" 
DataKeyNames="Roll_no" DataSourceID="SqlDataSource2"> 
<Columns> 
<asp:BoundField DataField="Roll_no" HeaderText="Roll_no" ReadOnly="True" 
SortExpression="Roll_no" /> 
<asp:BoundField DataField="Student_name" HeaderText="Student_name" 
SortExpression="Student_name" /> 
</Columns> 
<EmptyDataTemplate> no record found 
</EmptyDataTemplate> 
</asp:GridView> 
<asp:TextBox ID="TextBox1" runat="server"></asp:TextBox> 
<asp:TextBox ID="TextBox2" runat="server"></asp:TextBox> 
<asp:SqlDataSource ID="SqlDataSource2" runat="server" 
ConnectionString="<%$ ConnectionStrings:sem5ConnectionString %>" SelectCommand="SELECT * FROM 
[student]"></asp:SqlDataSource> 
<asp:SqlDataSource ID="SqlDataSource1" runat="server"></asp:SqlDataSource> 
<asp:Button ID="Button3" runat="server" OnClick="Button3_Click" Text="Insert" /> 
</p> 
</form> 
</body> 
</html>
---------------------------------------------------------------------------------------------
ASPX.CS CODE : WebForm1.aspx.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data.SqlClient;
namespace WebApplication11
{
    public partial class WebForm1 : System.Web.UI.Page
    {
        SqlConnection cn = new SqlConnection("Data Source=.\\sqlexpress;Initial 
        Catalog = sem5; Integrated Security = True"); 
SqlCommand co = new
SqlCommand(); SqlDataReader ds;
        SqlParameter @p1, @p2;
        protected void Page_Load(object sender, EventArgs e)
        {
            cn.Open();
            co.Connection =
            cn;
        }
        protected void Button3_Click(object sender, EventArgs e)
        {
            @p1 = new SqlParameter();
            @p1.ParameterName =
            "Roll_no";
            @p1.SqlDbType =
            System.Data.SqlDbType.VarChar; @p2 = new
            SqlParameter();
            @p2.ParameterName = "Student_name";
            @p2.SqlDbType =
            System.Data.SqlDbType.VarChar;
            co.Parameters.AddWithValue("@p1",
            TextBox1.Text);
            co.Parameters.AddWithValue("@p2",
            TextBox2.Text);
            co.CommandText = "insert into 
        student(Roll_no, Student_name)values(@p1, @p2)"; co.ExecuteNonQuery(); 
        }
    }
}


pratical 
Autopostback with several contarol listbox dropdownbox(User Control)

design code:-
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs" Inherits="YourNamespace.WebForm1" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title>Server Controls Demo</title>
</head>
<body>
    <form id="form1" runat="server">
        <div>
            <!-- ListBox -->
            <asp:ListBox ID="ListBox1" runat="server" SelectionMode="Multiple">
                <asp:ListItem>Item 1</asp:ListItem>
                <asp:ListItem>Item 2</asp:ListItem>
                <asp:ListItem>Item 3</asp:ListItem>
            </asp:ListBox>
            <br />

            <!-- Button to Display Selected Items -->
            <asp:Button ID="btnDisplay" runat="server" Text="Display Selected Items" OnClick="btnDisplay_Click" />
            <br />

            <!-- TextBox to Display Selected Items -->
            <asp:TextBox ID="txtSelectedItems" runat="server" ReadOnly="true"></asp:TextBox>
            <br />

            <!-- DropDownList1 -->
            <asp:DropDownList ID="DropDownList1" runat="server" AutoPostBack="true" OnSelectedIndexChanged="DropDownList1_SelectedIndexChanged">
                <asp:ListItem Text="Option 1" Value="1"></asp:ListItem>
                <asp:ListItem Text="Option 2" Value="2"></asp:ListItem>
                <asp:ListItem Text="Option 3" Value="3"></asp:ListItem>
            </asp:DropDownList>
            <br />

            <!-- Label to Display Selected Item from DropDownList1 -->
            <asp:Label ID="lblSelectedOption" runat="server"></asp:Label>
            <br />

            <!-- DropDownList2 for Font Size -->
            <asp:DropDownList ID="DropDownList2" runat="server" AutoPostBack="true" OnSelectedIndexChanged="DropDownList2_SelectedIndexChanged">
                <asp:ListItem Text="Small" Value="10"></asp:ListItem>
                <asp:ListItem Text="Medium" Value="14"></asp:ListItem>
                <asp:ListItem Text="Large" Value="18"></asp:ListItem>
            </asp:DropDownList>
            <br />

            <!-- Label to Change Font Size -->
            <asp:Label ID="lblChangeFontSize" runat="server"></asp:Label>
            <br />

            <!-- Image Control -->
            <asp:Image ID="imgPhoto" runat="server" ImageUrl="C:\Users\shaik\Downloads\photo.JPEG"  Width="500px" Height="500px"/>
            <br />

            <!-- CheckBoxes for Formatting -->
            <asp:CheckBox ID="chkUnderline" runat="server" Text="Underline" AutoPostBack="true" OnCheckedChanged="chk_CheckedChanged" />
            <asp:CheckBox ID="chkBold" runat="server" Text="Bold" AutoPostBack="true" OnCheckedChanged="chk_CheckedChanged" />
            <asp:CheckBox ID="chkItalic" runat="server" Text="Italic" AutoPostBack="true" OnCheckedChanged="chk_CheckedChanged" />
            <br />

            <!-- RadioButtons for Label Color -->
            <asp:RadioButton ID="rbRed" runat="server" Text="Red" GroupName="colorGroup" AutoPostBack="true" OnCheckedChanged="rb_CheckedChanged" />
            <asp:RadioButton ID="rbBlue" runat="server" Text="Blue" GroupName="colorGroup" AutoPostBack="true" OnCheckedChanged="rb_CheckedChanged" />
            <asp:RadioButton ID="rbGreen" runat="server" Text="Green" GroupName="colorGroup" AutoPostBack="true" OnCheckedChanged="rb_CheckedChanged" />
        </div>
    </form>
</body>
</html>

cs Code:-

using System;
using System.Linq;
using System.Web.UI.WebControls;

namespace YourNamespace
{
    public partial class WebForm1 : System.Web.UI.Page
    {
        protected void btnDisplay_Click(object sender, EventArgs e)
        {
            // Display selected items from the ListBox in TextBox
            txtSelectedItems.Text = string.Join(", ", ListBox1.Items.Cast<ListItem>().Where(li => li.Selected).Select(li => li.Text));
        }

        protected void DropDownList1_SelectedIndexChanged(object sender, EventArgs e)
        {
            // Display selected item from DropDownList1 in Label
            lblSelectedOption.Text = "Selected Option: " + DropDownList1.SelectedItem.Text;
        }

        protected void DropDownList2_SelectedIndexChanged(object sender, EventArgs e)
        {
            // Change font size of the label according to the selected item in DropDownList2
            int fontSize = Convert.ToInt32(DropDownList2.SelectedItem.Value);
            lblChangeFontSize.Style["font-size"] = fontSize + "px";
            lblChangeFontSize.Text = $"Font Size: {fontSize}px";
        }

        protected void chk_CheckedChanged(object sender, EventArgs e)
        {
            // Apply formatting to the label based on CheckBox states
            lblChangeFontSize.Style["text-decoration"] = chkUnderline.Checked ? "underline" : "none";
            lblChangeFontSize.Style["font-weight"] = chkBold.Checked ? "bold" : "normal";
            lblChangeFontSize.Style["font-style"] = chkItalic.Checked ? "italic" : "normal";
        }

        protected void rb_CheckedChanged(object sender, EventArgs e)
        {
            // Apply color to the label based on the selected RadioButton
            if (rbRed.Checked)
            {
                lblChangeFontSize.Style["color"] = "red";
            }
            else if (rbBlue.Checked)
            {
                lblChangeFontSize.Style["color"] = "blue";
            }
            else if (rbGreen.Checked)
            {
                lblChangeFontSize.Style["color"] = "green";
            }
        }
    }
}

prtical 
count the number of time visite to server

design 
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="WebApplication1.Default" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title>Submit Counter</title>
</head>
<body>
    <form id="form1" runat="server">
        <div>
            <h1>Submit Counter</h1>
            <asp:Label ID="lblSubmitCount" runat="server" Text="Number of Submissions: 0"></asp:Label>
            <br />
            <asp:Button ID="btnSubmit" runat="server" Text="Submit" OnClick="btnSubmit_Click" />
        </div>
    </form>
</body>
</html>

cs Code:-

using System;

namespace WebApplication1
{
    public partial class Default : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                // Initialize submission count on the first load
                ViewState["SubmitCount"] = 0;
                UpdateSubmitCountLabel();
            }
        }

        protected void btnSubmit_Click(object sender, EventArgs e)
        {
            // Increment the submission count
            int submitCount = (int)ViewState["SubmitCount"] + 1;
            ViewState["SubmitCount"] = submitCount;

            // Update the label to display the new submission count
            UpdateSubmitCountLabel();
        }

        private void UpdateSubmitCountLabel()
        {
            lblSubmitCount.Text = $"Number of Submissions: {ViewState["SubmitCount"]}";
        }
    }
}




